import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, ConversationHandler, filters
from components_db import COMPONENTS

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–¥—ñ–π —É –±–æ—Ç—ñ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler: –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –±—é–¥–∂–µ—Ç—É —Ç–∞ –∑–∞–¥–∞—á—ñ
ASK_BUDGET, ASK_TASK = range(2)

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞: –ø—Ä–æ–ø–æ–Ω—É—î —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø—ñ–¥–±—ñ—Ä —ñ –≤–∏–≤–æ–¥–∏—Ç—å –∫–Ω–æ–ø–∫—É
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—ñ–¥–±—ñ—Ä"], ["‚õî –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        'üëã –í—ñ—Ç–∞—é! –Ø –¥–æ–ø–æ–º–æ–∂—É –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –∫–æ–º–ø º—é—Ç–µ—Ä–Ω—ñ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—á—ñ –ø—ñ–¥ –≤–∞—à –±—é–¥–∂–µ—Ç.\n\nüí∏ –í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à –±—é–¥–∂–µ—Ç —É –≥—Ä–∏–≤–Ω—è—Ö:',
        reply_markup=reply_markup
    )
    return ASK_BUDGET

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É: –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏—Å–ª–æ, –ø—Ä–æ–ø–æ–Ω—É—î –≤–∏–±—ñ—Ä –∑–∞–¥–∞—á—ñ
async def ask_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚õî –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞":
        await cancel(update, context)
        return ConversationHandler.END
    try:
        budget = int(update.message.text)
        context.user_data['budget'] = budget
        keyboard = [["üéÆ –î–ª—è –≥–µ–π–º—ñ–Ω–≥—É"], ["üíº –î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≤–∞–∂–∫–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏"], ["üñ•Ô∏è –î–ª—è –æ—Ñ—ñ—Å–Ω–∏—Ö –∑–∞–¥–∞—á"], ["‚õî –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            'üìù –Ø–∫—ñ –æ—Å–Ω–æ–≤–Ω—ñ –∑–∞–¥–∞—á—ñ –¥–ª—è –∫–æ–º–ø º—é—Ç–µ—Ä–∞?\n\n–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ:',
            reply_markup=reply_markup
        )
        return ASK_TASK
    except ValueError:
        await update.message.reply_text('‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–±—é–¥–∂–µ—Ç —É –≥—Ä–∏–≤–Ω—è—Ö):')
        return ASK_BUDGET

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∑–∞–¥–∞—á—ñ: –ø—ñ–¥–±–∏—Ä–∞—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é, –≤–∏–≤–æ–¥–∏—Ç—å –¥–µ—Ç–∞–ª—ñ
async def ask_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚õî –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞":
        await cancel(update, context)
        return ConversationHandler.END
    # –í–∏–¥–∞–ª—è—î–º–æ –µ–º–æ–¥–∑—ñ –¥–ª—è –ø–æ—à—É–∫—É –∫–ª—é—á–∞ —É –±–∞–∑—ñ
    task = update.message.text.replace('üéÆ ', '').replace('üíº ', '').replace('üñ•Ô∏è ', '')
    budget = context.user_data.get('budget', 0)
    options = COMPONENTS.get(task, [])
    if not options:
        await update.message.reply_text('‚ùó –ù–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ –∑–∞–¥–∞—á—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –∫–Ω–æ–ø–æ–∫.')
        return ASK_TASK
    # –ü–æ—à—É–∫ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø—ñ–¥ –±—é–¥–∂–µ—Ç
    suitable = [c for c in options if c['price'] <= budget]
    if suitable:
        best = suitable[-1]  # –ù–∞–π–¥–æ—Ä–æ–∂—á–∞ –∑ —Ç–∏—Ö, —â–æ –ø—ñ–¥—Ö–æ–¥—è—Ç—å
        keyboard = [["üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—ñ–¥–±—ñ—Ä"], ["‚õî –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        details = (
            f'‚úÖ <b>{best["name"]} –≤–∞—Ä—ñ–∞–Ω—Ç</b> (‚âà<b>{best["price"]} –≥—Ä–Ω</b>)\n'
            f'üß† <b>CPU:</b> {best["cpu"]}\n'
            f'üéÆ <b>GPU:</b> {best["gpu"]}\n'
            f'üíæ <b>RAM:</b> {best["ram"]}\n'
            f'üíΩ <b>SSD/HDD:</b> {best["storage"]}\n'
            f'üîå <b>–ë–ª–æ–∫ –∂–∏–≤–ª–µ–Ω–Ω—è:</b> {best["psu"]}\n'
            f'üñß <b>–ú–∞—Ç–µ—Ä–∏–Ω—Å—å–∫–∞ –ø–ª–∞—Ç–∞:</b> {best["motherboard"]}\n'
            f'üñ•Ô∏è <b>–ö–æ—Ä–ø—É—Å:</b> {best["case"]}\n'
            f'üîó <a href="{best["link"]}">–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ/–ö—É–ø–∏—Ç–∏</a>'
        )
        await update.message.reply_text(details, reply_markup=reply_markup, parse_mode='HTML', disable_web_page_preview=True)
        return ASK_BUDGET
    else:
        keyboard = [["üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—ñ–¥–±—ñ—Ä"], ["‚õî –ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text('üòî –ù–∞ –∂–∞–ª—å, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π —É –≤–∞—à–æ–º—É –±—é–¥–∂–µ—Ç—ñ.', reply_markup=reply_markup)
        return ASK_BUDGET

# –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—ñ–¥–±–æ—Ä—É
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('‚õî –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ. –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start.')
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É: —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    application = ApplicationBuilder().token("7472880038:AAGumTtc-CXPkZVSLXqfPBaGBjPcM83gt8k").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASK_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_budget)],
            ASK_TASK: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_task)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    application.add_handler(conv_handler)
    application.run_polling()
